<!-- Copyright (C) 2012-13 MINHAP, Gobierno de EspaÃ±a
   This program is licensed and may be used, modified and redistributed under the terms
   of the European Public License (EUPL), either version 1.1 or (at your
   option) any later version as soon as they are approved by the European Commission.
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   or implied. See the License for the specific language governing permissions and
   more details.
   You should have received a copy of the EUPL1.1 license
   along with this program; if not, you may find it at
   http://joinup.ec.europa.eu/software/page/eupl/licence-eupl -->

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
			  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">	   			

	<context:property-placeholder
		location="file:${config.path}/loadTables-config.properties"
		ignore-unresolvable="true" />

	<!-- Factoria de creacion del bean encargado de realizar la planificacion 
		de la tarea -->
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="unidadOrganicaTrigger" />
				<ref bean="temporalDataCleanInsideTrigger" />
				<ref bean="temporalDataCheckInsideTrigger" />
			</list>
		</property>
		<property name="dataSource" ref="dataSource" />
	    <property name="transactionManager" ref="transactionManager" />
	    <property name="overwriteExistingJobs" value="true" />
	    <property name="autoStartup" value="true" />
	    <property name="jobFactory">
             <bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory"/>
         </property>
        <property name="applicationContextSchedulerContextKey"><value>applicationContext</value></property>
        <property name="quartzProperties">
	        <props>
	            <prop key="org.quartz.scheduler.instanceName">${org.quartz.scheduler.instanceName}</prop>
	            <prop key="org.quartz.scheduler.instanceId">${org.quartz.scheduler.instanceId}</prop>
	            <prop key="org.quartz.scheduler.skipUpdateCheck">${org.quartz.scheduler.skipUpdateCheck}</prop>
	            
	            <prop key="org.quartz.threadPool.class">${org.quartz.threadPool.class}</prop>
	            <prop key="org.quartz.threadPool.threadCount">${org.quartz.threadPool.threadCount}</prop>
	            <prop key="org.quartz.threadPool.threadPriority">${org.quartz.threadPool.threadPriority}</prop>
	            
	            <prop key="org.quartz.jobStore.misfireThreshold">${org.quartz.jobStore.misfireThreshold}</prop>
	            <prop key="org.quartz.jobStore.class">${org.quartz.jobStore.class}</prop>
	            <prop key="org.quartz.jobStore.driverDelegateClass">${org.quartz.jobStore.driverDelegateClass}</prop>
	            <prop key="org.quartz.jobStore.selectWithLockSQL">${org.quartz.jobStore.selectWithLockSQL}</prop>
	            <prop key="org.quartz.jobStore.tablePrefix">${org.quartz.jobStore.tablePrefix}</prop>
	            <prop key="org.quartz.jobStore.useProperties">${org.quartz.jobStore.useProperties}</prop>
	            <prop key="org.quartz.jobStore.isClustered">${org.quartz.jobStore.isClustered}</prop>
	            <prop key="org.quartz.jobStore.clusterCheckinInterval">${org.quartz.jobStore.clusterCheckinInterval}</prop>	            
	            
	            <prop key="org.quartz.plugin.triggHistory.class">${org.quartz.plugin.triggHistory.class}</prop>
	            <prop key="org.quartz.plugin.triggHistory.triggerFiredMessage">${org.quartz.plugin.triggHistory.triggerFiredMessage}</prop>
	            <prop key="org.quartz.plugin.triggHistory.triggerCompleteMessage">${org.quartz.plugin.triggHistory.triggerCompleteMessage}</prop>
	        </props>
    	</property>
	</bean>

	<!-- Configuracion de la planificacion de la tarea -->
	<bean id="unidadOrganicaTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="jobDetailUnidadOrganica" />
		<!-- Empieza pasados 10 segundos -->
		<property name="startDelay" value="${ws.unidadesOrganicas.startDelay}" />
		<!-- Repite cada dia -->
		<property name="repeatInterval" value="${ws.unidadesOrganicas.repeatInterval}" />
	</bean>

	<!-- Clase de Spring que se encarga de la llamada al metodo checkMemory 
		de la clase MemoryViewer -->
	<bean id="jobDetailUnidadOrganica" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="es.mpt.dsic.loadTables.controller.UnidadOrganicaController" />
	</bean>

</beans>	   					  