package service.test;

import java.io.IOException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.TestingAuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import es.mpt.dsic.inside.ws.exception.InsideWSException;
import es.mpt.dsic.inside.ws.exception.InsideWsErrors;
import es.mpt.dsic.inside.ws.operation.impl.InsideOperationWebServiceImpl;
import es.mpt.dsic.inside.xml.inside.ExpedienteInsideInfo;
import es.mpt.dsic.inside.xml.inside.TokenExpediente;
import es.mpt.dsic.inside.xml.inside.ws.credential.WSCredentialInside;
import es.mpt.dsic.inside.xml.inside.ws.documento.TipoDocumentoEniFileInside;
import es.mpt.dsic.inside.xml.inside.ws.expediente.documentos.TipoExpedienteEniFileInsideConDocumentos;
import junit.framework.TestCase;
import net.java.xades.util.Base64;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(
    locations = {"classpath:es/mpt/dsic/inside/context/inside-service-context.xml",
        "classpath:es/mpt/dsic/inside/context/inside-ws-context.xml",
        "classpath:es/mpt/dsic/inside/context/inside-security-context.xml",
        "classpath:es/mpt/dsic/inside/context/inside-context.xml"})
public class GeneraCredencialesAccesoExpedienteTest extends TestCase {


  public static WSCredentialInside INFO_CREDENCIALES;

  @Autowired
  private InsideOperationWebServiceImpl insideOperationWebServiceImpl;
  
  final String ExpedienteEniXml =
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/PgoKPG5zNzpleHBlZGllbnRlIHhtbG5zOmluc2lkZXdzPSJodHRwczovL3Nzd2ViLnNlYXAubWluaGFwLmVzL0luc2lkZS9YU0QvdjEuMC9XZWJTZXJ2aWNlIiB4bWxuczpuczk9Imh0dHBzOi8vc3N3ZWIuc2VhcC5taW5oYXAuZXMvSW5zaWRlL1hTRC92MS4wL2V4cGVkaWVudGUtZSIgeG1sbnM6bnM4PSJodHRwczovL3Nzd2ViLnNlYXAubWluaGFwLmVzL0luc2lkZS9YU0QvdjEuMC9tZXRhZGF0b3NBZGljaW9uYWxlcyIgSWQ9IkVTX0ExNDAwMjk2MV8yMDIwX0VYUF8xNjAiIHhtbG5zPSJodHRwOi8vYWRtaW5pc3RyYWNpb25lbGVjdHJvbmljYS5nb2IuZXMvRU5JL1hTRC92MS4wL2V4cGVkaWVudGUtZS9pbmRpY2UtZS9jb250ZW5pZG8iIHhtbG5zOm5zNj0iaHR0cDovL2FkbWluaXN0cmFjaW9uZWxlY3Ryb25pY2EuZ29iLmVzL0VOSS9YU0QvdjEuMC9kb2N1bWVudG8tZS9jb250ZW5pZG8iIHhtbG5zOm5zNT0iaHR0cDovL2FkbWluaXN0cmFjaW9uZWxlY3Ryb25pY2EuZ29iLmVzL0VOSS9YU0QvdjEuMC9leHBlZGllbnRlLWUvbWV0YWRhdG9zIiB4bWxuczpuczc9Imh0dHA6Ly9hZG1pbmlzdHJhY2lvbmVsZWN0cm9uaWNhLmdvYi5lcy9FTkkvWFNEL3YxLjAvZXhwZWRpZW50ZS1lIiB4bWxuczpuczI9Imh0dHA6Ly9hZG1pbmlzdHJhY2lvbmVsZWN0cm9uaWNhLmdvYi5lcy9FTkkvWFNEL3YxLjAvZXhwZWRpZW50ZS1lL2luZGljZS1lIiB4bWxuczpuczQ9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiIHhtbG5zOm5zMz0iaHR0cDovL2FkbWluaXN0cmFjaW9uZWxlY3Ryb25pY2EuZ29iLmVzL0VOSS9YU0QvdjEuMC9maXJtYSI+CiAgICA8bnMyOmluZGljZSBJZD0iRVhQX0lORElDRV9FU19BMTQwMDI5NjFfMjAyMF9FWFBfMTYwIj4KICAgICAgICA8bnMyOkluZGljZUNvbnRlbmlkbyBJZD0iRVhQX0lORElDRV9DT05URU5JRE9FU19BMTQwMDI5NjFfMjAyMF9FWFBfMTYwIj4KICAgICAgICAgICAgPEZlY2hhSW5kaWNlRWxlY3Ryb25pY28+MjAyMC0wMy0wMlQxNzozMDo1My4wMDArMDE6MDA8L0ZlY2hhSW5kaWNlRWxlY3Ryb25pY28+CiAgICAgICAgICAgIDxEb2N1bWVudG9JbmRpemFkbz4KICAgICAgICAgICAgICAgIDxJZGVudGlmaWNhZG9yRG9jdW1lbnRvPkVTX0ExNDAwMjk2MV8yMDIwXzI2NzwvSWRlbnRpZmljYWRvckRvY3VtZW50bz4KICAgICAgICAgICAgICAgIDxWYWxvckh1ZWxsYT4zNjZjNmVjMmRhOTU0ZjZiYTFhNDFmZTQ0MjBiMmI3NjE1MWQ1YWFmZGFjMDAyZGIzNWEyNGM3ODRmZmE2MjVhYzcyOGM3Y2U0NWUzZjRhMDAyYzc2ZGRhYzdlNjBlZTJhYjI0NDU3NmVhYzU3MWVjOGFiM2FkZjViZGFiYWI4ZTwvVmFsb3JIdWVsbGE+CiAgICAgICAgICAgICAgICA8RnVuY2lvblJlc3VtZW4+aHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhNTEyPC9GdW5jaW9uUmVzdW1lbj4KICAgICAgICAgICAgICAgIDxGZWNoYUluY29ycG9yYWNpb25FeHBlZGllbnRlPjIwMjAtMDMtMDJUMDA6MDA6MDAuMDAwKzAxOjAwPC9GZWNoYUluY29ycG9yYWNpb25FeHBlZGllbnRlPgogICAgICAgICAgICAgICAgPE9yZGVuRG9jdW1lbnRvRXhwZWRpZW50ZT4xPC9PcmRlbkRvY3VtZW50b0V4cGVkaWVudGU+CiAgICAgICAgICAgIDwvRG9jdW1lbnRvSW5kaXphZG8+CiAgICAgICAgPC9uczI6SW5kaWNlQ29udGVuaWRvPgogICAgICAgIDxuczM6ZmlybWFzPgogICAgICAgICAgICA8bnMzOmZpcm1hIElkPSJGSVJNQV8wIiByZWY9IiNFWFBfSU5ESUNFX0NPTlRFTklET0VTX0ExNDAwMjk2MV8yMDIwX0VYUF8xNjAiPgogICAgICAgICAgICAgICAgPG5zMzpUaXBvRmlybWE+VEYwMzwvbnMzOlRpcG9GaXJtYT4KICAgICAgICAgICAgICAgIDxuczM6Q29udGVuaWRvRmlybWE+CiAgICAgICAgICAgICAgICAgICAgPG5zMzpGaXJtYUNvbkNlcnRpZmljYWRvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiBJZD0iU2lnbmF0dXJlLWMwNGZkMGRjLWEyZTYtNDZhNC05ZDUwLTNjNDU5NTQ4MDZlOS1TaWduYXR1cmUiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiLz48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxkczpSZWZlcmVuY2UgSWQ9IlJlZmVyZW5jZS1hNjFiNjY4Mi1mMGQxLTQzMGItYjU4NC0wZmI2MzA1ZmY3ZWEiIFR5cGU9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNPYmplY3QiIFVSST0iI0VYUF9JTkRJQ0VfQ09OVEVOSURPRVNfQTE0MDAyOTYxXzIwMjBfRVhQXzE2MCI+PGRzOlRyYW5zZm9ybXM+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDEvUkVDLXhtbC1jMTRuLTIwMDEwMzE1Ii8+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnL1RSLzE5OTkvUkVDLXhwYXRoLTE5OTkxMTE2Ij48ZHM6WFBhdGggeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPm5vdChhbmNlc3Rvci1vci1zZWxmOjpkczpTaWduYXR1cmUpPC9kczpYUGF0aD48L2RzOlRyYW5zZm9ybT48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTUxMiIvPjxkczpEaWdlc3RWYWx1ZT5CcEEwNmlTd3hLcU9OUnRNeFJHSXZMZldac3pvWEpkallEWXczM1RDQ3RiS25OV2Nwakl2dVV6Y3lNT05NeGpRcjhCMDBrNE0ybkxKCm5uVUlleitnRVE9PTwvZHM6RGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PGRzOlJlZmVyZW5jZSBUeXBlPSJodHRwOi8vdXJpLmV0c2kub3JnLzAxOTAzI1NpZ25lZFByb3BlcnRpZXMiIFVSST0iI1NpZ25hdHVyZS1jMDRmZDBkYy1hMmU2LTQ2YTQtOWQ1MC0zYzQ1OTU0ODA2ZTktU2lnbmVkUHJvcGVydGllcyI+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTUxMiIvPjxkczpEaWdlc3RWYWx1ZT5ITnNoV1gvY2l1TUZGMW5LZmZNL2dGMDFzbjhaRmIycGVOcHZQY01XWllKb0hGM3dKenJnbHpsd1RkeWlqUGcvT0hjQ1JGUjdOaWJLCllYWis2RkZXaGc9PTwvZHM6RGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PGRzOlJlZmVyZW5jZSBVUkk9IiNTaWduYXR1cmUtYzA0ZmQwZGMtYTJlNi00NmE0LTlkNTAtM2M0NTk1NDgwNmU5LUtleUluZm8iPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGE1MTIiLz48ZHM6RGlnZXN0VmFsdWU+YVRuOGQvR0VLSkxJTzhLWmhBU0Q3VS90aE1WYVhyd2UxTEhUZ1lEUkhXNGNtWGtQU1BpVkVua3BkZnBia0dRa040dkVUVDlZLzRaNwpGZFVWU0I3WnhRPT08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWUgSWQ9IlNpZ25hdHVyZS1jMDRmZDBkYy1hMmU2LTQ2YTQtOWQ1MC0zYzQ1OTU0ODA2ZTktU2lnbmF0dXJlVmFsdWUiPkJDQ1JLVEFSTjVXcHYrYzBUTlNOeW93Ykk3S0xjR0NHUkUralozRWY5bU81SEZBSWp5WXI0YzlsTUZhVGhaR2xVMG4rR2V3SS9ZMmQKODRtOGRJcnFUR1VqK0RCNGpMSTVxSENDTFR5TGFZN25rclpIaDBQVncrZU9wYW1TRUxCbFBtK1lvblc1L3oySkhENDc1VVJYcUZXZApPaWQwWGpORGR2NDlwenNhVVpmUHJqclQ0NXh4SnZEeDRhMnFTWDl4d0tJSmd2dnpjdVF4eFd4ZzVXTk52SVVXb0pTcjE5VEpHQ3lRCkVsbkozdWtLb1BTdUhiazc5ejlhQi96UkRCTW5XRlk4RS84V3RhWmUvRzF1eEJ0V1JlcTNmb1A2d3JEYnBDSFdpTjBqaEVRZTJpaC8KeEpOM0Jpd1owK3pKY2lpdXp5bk5SeVlER01oeG1WbHVFem5CMUE9PTwvZHM6U2lnbmF0dXJlVmFsdWU+PGRzOktleUluZm8gSWQ9IlNpZ25hdHVyZS1jMDRmZDBkYy1hMmU2LTQ2YTQtOWQ1MC0zYzQ1OTU0ODA2ZTktS2V5SW5mbyI+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJSHNUQ0NCcG1nQXdJQkFnSVFETUN4UnJaeS9SVmNFOGlqYitzU3R6QU5CZ2txaGtpRzl3MEJBUXNGQURCSE1Rc3dDUVlEVlFRRwpFd0pGVXpFUk1BOEdBMVVFQ2d3SVJrNU5WQzFTUTAweEpUQWpCZ05WQkFzTUhFRkRJRU52YlhCdmJtVnVkR1Z6SUVsdVptOXliY09oCmRHbGpiM013SGhjTk1UZ3hNakUwTVRVeE16TTVXaGNOTWpFeE1qRTBNVFV4TXpNNFdqQ0IyakVMTUFrR0ExVUVCaE1DUlZNeER6QU4KQmdOVkJBY01CazFCUkZKSlJERXdNQzRHQTFVRUNnd25VMFZEVWtWVVFWSkpRU0JFUlNCRlUxUkJSRThnUkVVZ1JsVk9RMGxQVGlCUQpWVUpNU1VOQk1UVXdNd1lEVlFRTERDeFRSVU5TUlZSQlVrbEJJRWRGVGtWU1FVd2dSRVVnUVVSTlNVNUpVMVJTUVVOSlQwNGdSRWxIClNWUkJUREVTTUJBR0ExVUVCUk1KVXpJNE16TXdNREpGTVJnd0ZnWURWUVJoREE5V1FWUkZVeTFUTWpnek16QXdNa1V4SXpBaEJnTlYKQkFNTUdsTkZURXhQSUVWT1ZFbEVRVVFnVTBkQlJDQlFVbFZGUWtGVE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQgpDZ0tDQVFFQXZkT0IvbVJLekZKU1pLYkRyQnZab29tbytZdWMrSUtyOXVpWUlSdlRneit5RXF1Y1ZSZWpSaE1qc0loMU1pVDFHbFJiCitWOWlTVDZwUmo3dC9hUzhINlNxeml6SXk3NTZUZ3NKejhHVlJiT2ZYMkExWENONVFLMEZvOTZIbWNBRFZqMDFNMTh6ZStWUXo3WUcKMFEvb25iZHg1SVp3Tm5jeE9uM2UwZkd3MlRFYjg1d3V5bmhCTkQzY2kyMzQxK3poL3poY0hFZDByTVh2Nk5Ka1RpMkRpUzVhVng4LwpvdTRMakZ1bTlIbUZCcklPZmJWdjhyK1E1VzFxNDk0SGxScUdxL3JuVHlHaXNxM1lBQzJpRUUvY3RKSmY4NmR6YS9iMDhsYjl5RlQrCldCbVc2WnM1QWEzQ3ZJNStkbkdyRUprL08zditKaUJNYURhTXprd0ZaOE5rQ1FJREFRQUJvNElFQXpDQ0EvOHdEQVlEVlIwVEFRSC8KQkFJd0FEQ0JnUVlJS3dZQkJRVUhBUUVFZFRCek1Ec0dDQ3NHQVFVRkJ6QUJoaTlvZEhSd09pOHZiMk56Y0dOdmJYQXVZMlZ5ZEM1bQpibTEwTG1WekwyOWpjM0F2VDJOemNGSmxjM0J2Ym1SbGNqQTBCZ2dyQmdFRkJRY3dBb1lvYUhSMGNEb3ZMM2QzZHk1alpYSjBMbVp1CmJYUXVaWE12WTJWeWRITXZRVU5EVDAxUUxtTnlkRENDQVRRR0ExVWRJQVNDQVNzd2dnRW5NSUlCR0FZS0t3WUJCQUdzWmdNSkV6Q0MKQVFnd0tRWUlLd1lCQlFVSEFnRVdIV2gwZEhBNkx5OTNkM2N1WTJWeWRDNW1ibTEwTG1WekwyUndZM012TUlIYUJnZ3JCZ0VGQlFjQwpBakNCelF5QnlrTmxjblJwWm1sallXUnZJR04xWVd4cFptbGpZV1J2SUdSbElITmxiR3h2SUdWc1pXTjBjc096Ym1samJ5QnpaV2ZECnVtNGdjbVZuYkdGdFpXNTBieUJsZFhKdmNHVnZJR1ZKUkVGVExpQlRkV3BsZEc4Z1lTQnNZWE1nWTI5dVpHbGphVzl1WlhNZ1pHVWcKZFhOdklHVjRjSFZsYzNSaGN5QmxiaUJzWVNCRVVFTWdaR1VnUms1TlZDMVNRMDBnWTI5dUlFNUpSam9nVVRJNE1qWXdNRFF0U2lBbwpReTlLYjNKblpTQktkV0Z1SURFd05pMHlPREF3T1MxTllXUnlhV1F0UlhOd1ljT3hZU2t3Q1FZSEJBQ0w3RUFCQVRBNEJnTlZIUkVFCk1UQXZwQzB3S3pFcE1DY0dDU3NHQVFRQnJHWUJDQXdhVTBWTVRFOGdSVTVVU1VSQlJDQlRSMEZFSUZCU1ZVVkNRVk13RXdZRFZSMGwKQkF3d0NnWUlLd1lCQlFVSEF3SXdEZ1lEVlIwUEFRSC9CQVFEQWdUd01CMEdBMVVkRGdRV0JCUi9XVm1wUkxhd2xIeGV3QzRsSnNxdApFZ1FFTnpDQnNBWUlLd1lCQlFVSEFRTUVnYU13Z2FBd0NBWUdCQUNPUmdFQk1Bc0dCZ1FBamtZQkF3SUJEekFUQmdZRUFJNUdBUVl3CkNRWUhCQUNPUmdFR0FqQnlCZ1lFQUk1R0FRVXdhREF5Rml4b2RIUndjem92TDNkM2R5NWpaWEowTG1adWJYUXVaWE12Y0dSekwxQkUKVTE5RFQwMVFYMlZ6TG5Ca1poTUNaWE13TWhZc2FIUjBjSE02THk5M2QzY3VZMlZ5ZEM1bWJtMTBMbVZ6TDNCa2N5OVFSRk5mUTA5TgpVRjlsYmk1d1pHWVRBbVZ1TUI4R0ExVWRJd1FZTUJhQUZCbjRXQzhVMXFiTW13U1lDQTFNMTZzQXA0TmxNSUhnQmdOVkhSOEVnZGd3CmdkVXdnZEtnZ2MrZ2djeUdnWjVzWkdGd09pOHZiR1JoY0dOdmJYQXVZMlZ5ZEM1bWJtMTBMbVZ6TDBOT1BVTlNUREVzVDFVOVFVTWwKTWpCRGIyMXdiMjVsYm5SbGN5VXlNRWx1Wm05eWJXRjBhV052Y3l4UFBVWk9UVlF0VWtOTkxFTTlSVk0vWTJWeWRHbG1hV05oZEdWUwpaWFp2WTJGMGFXOXVUR2x6ZER0aWFXNWhjbmsvWW1GelpUOXZZbXBsWTNSamJHRnpjejFqVWt4RWFYTjBjbWxpZFhScGIyNVFiMmx1CmRJWXBhSFIwY0RvdkwzZDNkeTVqWlhKMExtWnViWFF1WlhNdlkzSnNjMk52YlhBdlExSk1NUzVqY213d0RRWUpLb1pJaHZjTkFRRUwKQlFBRGdnRUJBSlZMeVo2bEozZjAzY2dUbG51SGJuRmNVbzlxM2VlOTZFZTREeG03TS80NWZ3TVZhYkRpdFZMWEFjY2NPSnZ1aEE1TApMTW5DeEhjS0pGVXUxUko3SG10YTRaZHl6NHdzc1dXOUFBWGxFc05vS282MVhaQnlBa3ZKck84WU5PS0JkNEhUaUZlQ1Y1NzR0Q2ZGClJqTmdGSGM5Nk9uM09oWjlhRkU4QkN2Q0YwV1l1TVFyUWluanNDem1DSW5CUzJsR2NvUGJ0M2dkT25KV1NvcCtXR1pNdjFndWVhR0YKeHJYOG9RejY0L3JiOU84Mk42WnNjRE9SL0wrZ3dmdU1yaVhML3RiL3FsdlRhY0gzSzZ6OUtZcy9UMjBYNGlKQkJOaG1uUC8rRG9YaAppS3E0d29yNWNibW9vaDRVUXhvcllLUmtyZGMrbnJGSVlrLzd5bW4vWjYrQ1Q3bz08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjxkczpLZXlWYWx1ZT48ZHM6UlNBS2V5VmFsdWU+PGRzOk1vZHVsdXM+dmRPQi9tUkt6RkpTWktiRHJCdlpvb21vK1l1YytJS3I5dWlZSVJ2VGd6K3lFcXVjVlJlalJoTWpzSWgxTWlUMUdsUmIrVjlpU1Q2cApSajd0L2FTOEg2U3F6aXpJeTc1NlRnc0p6OEdWUmJPZlgyQTFYQ041UUswRm85NkhtY0FEVmowMU0xOHplK1ZRejdZRzBRL29uYmR4CjVJWndObmN4T24zZTBmR3cyVEViODV3dXluaEJORDNjaTIzNDEremgvemhjSEVkMHJNWHY2TkprVGkyRGlTNWFWeDgvb3U0TGpGdW0KOUhtRkJySU9mYlZ2OHIrUTVXMXE0OTRIbFJxR3Evcm5UeUdpc3EzWUFDMmlFRS9jdEpKZjg2ZHphL2IwOGxiOXlGVCtXQm1XNlpzNQpBYTNDdkk1K2RuR3JFSmsvTzN2K0ppQk1hRGFNemt3Rlo4TmtDUT09PC9kczpNb2R1bHVzPjxkczpFeHBvbmVudD5BUUFCPC9kczpFeHBvbmVudD48L2RzOlJTQUtleVZhbHVlPjwvZHM6S2V5VmFsdWU+PC9kczpLZXlJbmZvPjxkczpPYmplY3Q+PHhhZGVzOlF1YWxpZnlpbmdQcm9wZXJ0aWVzIHhtbG5zOnhhZGVzPSJodHRwOi8vdXJpLmV0c2kub3JnLzAxOTAzL3YxLjMuMiMiIElkPSJTaWduYXR1cmUtYzA0ZmQwZGMtYTJlNi00NmE0LTlkNTAtM2M0NTk1NDgwNmU5LVF1YWxpZnlpbmdQcm9wZXJ0aWVzIiBUYXJnZXQ9IiNTaWduYXR1cmUtYzA0ZmQwZGMtYTJlNi00NmE0LTlkNTAtM2M0NTk1NDgwNmU5LVNpZ25hdHVyZSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjx4YWRlczpTaWduZWRQcm9wZXJ0aWVzIElkPSJTaWduYXR1cmUtYzA0ZmQwZGMtYTJlNi00NmE0LTlkNTAtM2M0NTk1NDgwNmU5LVNpZ25lZFByb3BlcnRpZXMiPjx4YWRlczpTaWduZWRTaWduYXR1cmVQcm9wZXJ0aWVzPjx4YWRlczpTaWduaW5nVGltZT4yMDIwLTAzLTAyVDE3OjMxOjE0KzAxOjAwPC94YWRlczpTaWduaW5nVGltZT48eGFkZXM6U2lnbmluZ0NlcnRpZmljYXRlPjx4YWRlczpDZXJ0Pjx4YWRlczpDZXJ0RGlnZXN0PjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGE1MTIiLz48ZHM6RGlnZXN0VmFsdWU+eW5oYXVvNzR2cWNFdzZBeHFjZFJhMUtHLzV5dnNzTnQyd1B4R2tRMEhiZ0h3UXQwTnN4RllLV3FGL2paQlRsOWZKOHFTcHFWQURMQ2xUQlNESVNzZlE9PTwvZHM6RGlnZXN0VmFsdWU+PC94YWRlczpDZXJ0RGlnZXN0Pjx4YWRlczpJc3N1ZXJTZXJpYWw+PGRzOlg1MDlJc3N1ZXJOYW1lPkM9RVMsTz1GTk1ULVJDTSxPVT1BQyBDb21wb25lbnRlcyBJbmZvcm3DoXRpY29zPC9kczpYNTA5SXNzdWVyTmFtZT48ZHM6WDUwOVNlcmlhbE51bWJlcj4xNjk1MTI1MjUzNTE5NDE4NDIwNzM0OTczOTMxMjQyNDYyMDcyNzwvZHM6WDUwOVNlcmlhbE51bWJlcj48L3hhZGVzOklzc3VlclNlcmlhbD48L3hhZGVzOkNlcnQ+PC94YWRlczpTaWduaW5nQ2VydGlmaWNhdGU+PC94YWRlczpTaWduZWRTaWduYXR1cmVQcm9wZXJ0aWVzPjx4YWRlczpTaWduZWREYXRhT2JqZWN0UHJvcGVydGllcz48eGFkZXM6RGF0YU9iamVjdEZvcm1hdCBPYmplY3RSZWZlcmVuY2U9IiNSZWZlcmVuY2UtYTYxYjY2ODItZjBkMS00MzBiLWI1ODQtMGZiNjMwNWZmN2VhIj48eGFkZXM6RGVzY3JpcHRpb24vPjx4YWRlczpPYmplY3RJZGVudGlmaWVyPjx4YWRlczpJZGVudGlmaWVyIFF1YWxpZmllcj0iT0lEQXNVUk4iPnVybjpvaWQ6MS4yLjg0MC4xMDAwMy41LjEwOS4xMDwveGFkZXM6SWRlbnRpZmllcj48eGFkZXM6RGVzY3JpcHRpb24vPjwveGFkZXM6T2JqZWN0SWRlbnRpZmllcj48eGFkZXM6TWltZVR5cGU+dGV4dC94bWw8L3hhZGVzOk1pbWVUeXBlPjx4YWRlczpFbmNvZGluZy8+PC94YWRlczpEYXRhT2JqZWN0Rm9ybWF0PjwveGFkZXM6U2lnbmVkRGF0YU9iamVjdFByb3BlcnRpZXM+PC94YWRlczpTaWduZWRQcm9wZXJ0aWVzPjwveGFkZXM6UXVhbGlmeWluZ1Byb3BlcnRpZXM+PC9kczpPYmplY3Q+PC9kczpTaWduYXR1cmU+CiAgICAgICAgICAgICAgICAgICAgPC9uczM6RmlybWFDb25DZXJ0aWZpY2Fkbz4KICAgICAgICAgICAgICAgIDwvbnMzOkNvbnRlbmlkb0Zpcm1hPgogICAgICAgICAgICA8L25zMzpmaXJtYT4KICAgICAgICA8L25zMzpmaXJtYXM+CiAgICA8L25zMjppbmRpY2U+CiAgICA8bnM1Om1ldGFkYXRvc0V4cCBJZD0iRVhQX0VTX0ExNDAwMjk2MV8yMDIwX0VYUF8xNjBfTUVUQURBVE9TIj4KICAgICAgICA8bnM1OlZlcnNpb25OVEk+aHR0cDovL2FkbWluaXN0cmFjaW9uZWxlY3Ryb25pY2EuZ29iLmVzL0VOSS9YU0QvdjEuMC9leHBlZGllbnRlLWU8L25zNTpWZXJzaW9uTlRJPgogICAgICAgIDxuczU6SWRlbnRpZmljYWRvcj5FU19BMTQwMDI5NjFfMjAyMF9FWFBfMTYwPC9uczU6SWRlbnRpZmljYWRvcj4KICAgICAgICA8bnM1Ok9yZ2Fubz5KMDAwMDY5MDM8L25zNTpPcmdhbm8+CiAgICAgICAgPG5zNTpGZWNoYUFwZXJ0dXJhRXhwZWRpZW50ZT4yMDIwLTAzLTAyVDAwOjAwOjAwLjAwMCswMTowMDwvbnM1OkZlY2hhQXBlcnR1cmFFeHBlZGllbnRlPgogICAgICAgIDxuczU6Q2xhc2lmaWNhY2lvbj4xMjM0NTwvbnM1OkNsYXNpZmljYWNpb24+CiAgICAgICAgPG5zNTpFc3RhZG8+RTAxPC9uczU6RXN0YWRvPgogICAgPC9uczU6bWV0YWRhdG9zRXhwPgogICAgPG5zNzpWaXN1YWxpemFjaW9uSW5kaWNlIElkPSJWSVNVQUxJWkFDSU9OX0lORElDRSI+CiAgICAgICAgPG5zNjpWYWxvckJpbmFyaW8+SlZCRVJpMHhMamNLSmVMano5TUtNU0F3SUc5aWFnbzhQQzlVZVhCbEwxaFBZbXBsWTNRdlUzVmlkSGx3WlM5SmJXRm5aUzlYYVdSMGFDQXlNakF2U0dWcFoyaDBJREl5TUM5TVpXNW5kR2dnTlRJd01pOURiMnh2Y2xOd1lXTmxXeTlEWVd4U1IwSThQQzlIWVcxdFlWc3lMaklnTWk0eUlESXVNbDB2VFdGMGNtbDRXekF1TkRFeU16a2dNQzR5TVRJMk5DQXdMakF4T1RNeklEQXVNelUzTlRnZ01DNDNNVFV4TnlBd0xqRXhPVEU1SURBdU1UZ3dORFVnTUM0d056SXhPQ0F3TGprMU1EUmRMMWRvYVhSbFVHOXBiblJiTUM0NU5UQTBNeUF4SURFdU1EbGRQajVkTDBSbFkyOWtaVkJoY20xelBEd3ZRbWwwYzFCbGNrTnZiWEJ2Ym1WdWRDQTRMMUJ5WldScFkzUnZjaUF4TlM5RGIyeDFiVzV6SURJeU1DOURiMnh2Y25NZ016NCtMMGx1ZEdWdWRDOVFaWEpqWlhCMGRXRnNMMEpwZEhOUVpYSkRiMjF3YjI1bGJuUWdPQzlHYVd4MFpYSXZSbXhoZEdWRVpXTnZaR1UrUG5OMGNtVmhiUXA0WHUyZGpVc2J5eHJHNzk5M0w1WWVwQWVMWWxFT2xoNHNGa3RvaWZSZ0VjVFNnOFVpaU1WaXNaYUFFQkRGSWdoQ3NFUUVRUkJMSUJBSWlDSUlBU0ZZaElEM09jNTB6blNTblV3MkgvT1I5OGVESkxzem00MzdaR2JlbVoyZC85d1NoR09RS1FubklGTVN6a0dtSkp5RFRFazRCNW1TY0E0eUplRWNaRXJDT2NpVWhIT1FLUW5uSUZNU3prR21iSlozczdPZmxwZjVHNklWa0NtYjR2THk4bi8vL2U5QWZ6OS9UN1FDTW1WTUtwWEs1c2JHd3NJQ1RBbk56ODhmSEJ6d2ZVUnprQ2xqQWdzeU93cmQ2K25oKzRqbUlGUEdwRnd1cDlOcE5DaVpJNytzcnU3czdQQjlSSE9RS1p2aTZ1b0tqbnpZMThmZkU2MkFUTmtzS0N4UlRQSTNSQ3NnVXhMT1FhYU1Ed0p3aERzZmw1WStyNndjSGg3eXJVVFRrQ2xqVWlxVkpwSkpGdVV3dlo2Yy9IRjl6WGNUVFVDbWpBa3NLRHVTNmYzY0hOOU5OQUdaTWc2NVhFNnhvMUM1WE9hSmlMaVFLZU93dnI2dWVGSG8rUGlZSnlMaVFxYU13N2U5UGNXTFFzVmlrU2NpNGtLbWpNUFYxVlZ2YjY5aVIralI0T0ROelExUFJNU0ZUQm1UblowZHhaSDNlbnFvWTZnbGtDbmpzNS9Ob21oa2pudzhNa0t0eVZaQnBtd1dWT1dBdnlGYUFablNGTGxqSEs4dklxaFVLandSRVJjeVpXMFFyMlF5bVUvTHkxTlRVMzgrZWZMYi9mdnluV25WRFVvaCtKSW51cjM5c3JyNnNLOFBOZnRFTW9uWGhVS0I3eUMwa0NsVjh2bjgvUHg4ZFhBZHo1VEtYclJCY1hCeXB4NHk1YitjbnA0bUVnbkZSa0l0TVNVVDRuUllrOForb2lCVGNqWTNObEJISys2UjFVSlRNcUZtMzk3ZTVra0ppY0JOaWRMbzZPZ0lIZ0xmOXZiNDFsOUIxUEx5eFF2Rk1kWENFWGlHRnBtUzZjUGlJazlkQlhiaHAzSndjRkFzRnJ1cVR6NU1VNTZmbmFWU0tRUW84dVVmSGhyaXV5WGdTRTJWTGF0TnBvVGV6YzdXak5ubE5LanhYMDlPNG5mVkRkRjlhS1lzbFVxNHhyaUU4aFZscWpZbExqQ0NheVZabE5wblNtaDZlcnJhYlVvYXBvSCsvbzlMUzJIM2pBWmxTbmhGMHk2c05xV1lpMmlpdHBvU1NxZlRQTnRQbEFTeUVNVUhQS1Faamluck9rQXhKZHFhU29LYVFpNFVZK3ZyNjVlWGx6eW5zU2tSenNOcXlJNkRLTW1xaFo4VFdoMDg1eDFLZ21xaDBSbGtXek1FVTZMaSsvdnRXK1dDVlVzMkpiSThIaGxSRWloQ2t6UnFPTnZRbERMNzJhelN4cTBXNGkyZStnNWxiMDJoUVJ6ZUhBenZUWW40MmlSMmhtUlRhdTdTaFhwN2U3OXViV2xDaWhpbUJEZ2dEbHV6dlN1MHU3dkxVNXVaRWtLeldIT3FQdUszS1hFeGxObGJHZ2xUSXRmRHZqNWxyeEFjK2Yza2hLV01JcDRwR1lpZ05iNUV5Y2ZUR1pzU1dsaFk0SG1Dd0c5VG1rY1NzSnE0Y3ByV0pCcDJkUjBKbWpFbDBOeTREb25HSzM1dk5XOGxyaW1VL1N4WEFIaHN5a0tob0s4S21WQzdvVTZVRzE3djUrYVVORUthcm15WkprMEpFUDBvR1lWU3FSUlBkRmVvNDJ0K1hsbjUvY0VESlptaTZqakpYencyWmQySysvbjRlQzZYNDZsL29xbTdjZUZMcFJKUHA2VjVVOEpBVWIrb1oyTmpQSkVFbXM2b0Z2UUZKMzUrUExYbitHcEt4TVhLSlpHRml5ZEhERExGWWxGSkxQUnhhWWtucWtmenBnUTFaNDVES1BONGlpclF0TkQ3TXAvUDg2USs0NnNwTlgxQXVHeWFkcUhHemZ2WkxFOVVqNWFZVXRNRElQZUpLdWg5R1ViRTQ2VXBiMjV1b2k0TTZrUjlwS0x4azhZS0NpMHhKVW8xSmE4UVFqR2VxQmFiR3h0S2VpRzBRQUxvVHZmU2xJZUhoOHJGRUtyNzRKUjBPcTFrWVlLYmVRb0RXbUpLcEZUeUN1SDRQRkV0MEN6KzQ0OC9sQ3hDSnIwSGp1T2xLUkdmS2xlQ0NjVm4zVWdseXBTUStkQklTMHg1ZW5xcTVCV0thaEFMTkNld3RyYkdFM21MbDZhTTZrOUI2TUJUUklQcnJlUVNNdTlTYVlrcE5hM2J1ck4xOGZ0UnNnZ0ZFSU43YWNxb2NjWFBLeXM4UlRRYUs1Z3Y3OUFTVTM3ZDJsTHlDcG44UEtKRzBwVUJkQjhKeXBSMWF6MmdhY205bVpuaGllclJFbE0rR3h0VDhncVpOQ1NpK2g5Z1ZwN0NXNEl5cGNsUUc0TFRxTkVSeERvZDZ6elhoTjVQUjBkNUlpMGZsNWFVakV6eWZTZWVFcFFwRFFjSk5jT01KZzBBMEx3cFVTb3JHWVhrWVVZTlVRMXIrWllPVHduS2xJYk5xZThuSjBwR0lSU1crajVDUnBPbTNON2VWbkxKTW95M29tcC93MytDeTNocHlxZ0JPdWowOUpRbjBxTHA1M3ZZMTFmWFdMRDF1OW5abXFvN2V5YVh5MFdOZWtPRzVWeTVYSTRhUGdoZ1VNZExVMnI2R2cwdlNjMnk2dEhnSUR5QnlqMXFNbTVMMk56WVFNMkxjS1RtZENMRGo5YmNzeGZBWEhJdlRhbnBka1lRWXpqVGJ6K2JoWU1SRzFtY1dJMHZnay9IYnd5L0JKU3lodmRFNGxRSCt2dVZMeTRVd0tPRXZUUWxFQStHckJiS0laNG9VRFNCR3BvbFBKSFArR3BLellXQjJsci8ya1VmSktGYTUrbDh4bGRUNnUrbm5FZ21lYnF3K0hGOXJRblJFRCtaZDkyN2pLK21CTlZkZmJncXFMczdlWnNNb21ENEFPQUYzOVJtS3BVSzZnRUVaTXAzaDh4dlVuWWNqMDBKSzRqMlB1S2JUOHZMNWpkRTZrRWtnUkRrOFBEdzY5WVdEZ3YzdjN6eEFubytQajQ4TkFScEprTmlGMHVEeEN6WDMyL2Y0aUE0RkE2SXc3WXFvc3JuOHppeTZGM0N2NkpqUDR4MjQ3RXBRYUZRd0xYSDlZNTlwZG5Nck0yTkRSUXpLR1dmalkxcEF0dFdDY2JGQitIajhLSDRhTmdMcDhGUHFFRktwVklxbGNLaEREdG92Y0J2VThiai9Pd01OZUNIeFVWVWdqVTdDenN2bkFaK1hUaWxUQ1pqZmdkZHFIU0ZLVkdPb3VwRWlmSjZjbEpUODdvam5DUk9GU2VNMDI1VmRlOFJJWnNTVFV6VTdMaTZqaFNIOFlTVHgxZkFGMmxWaTlsOVFqTWxHbWVJdmhGWTFIMmFsSS9DbDhKWHd4ZU0zUWIxZ25CTXVaL05JaHFOdWxjeU1PRnI0c3VhenduMmkzQk1xUi9xQ0ZJNzJrbVAvaEpVOWYweTRqN0xJSVdHSnYvYXdSR1VLUzh1TGxvVjArQTRhTURod245WVhQeXl1Z3B0Ym15Z1pBS0lpSS92T0Q4N3V4dk4rUmUyWGF4SGdlaUU1ZjI0dERRMU5mVjBkRlR6Y0l1R2hPbzc0TGdudEVCSGM2dGxsQjRORHFLSWZUODNsMHFsZG5kM2M3bWM0VXlkZUZ4ZFhlRWo4RUg0dUhlenM0bEVJa1ozUGV6T0R4Y2lvWmtTWWVuejhYSGxFaXBDTVlOeWEzMTlIZVp3Skl5OXVia3BGQW80Slp4WTNWZ05YNUJuQzVUUVRBbHFQcmR5ZUdnSXhSSUtHQytHNDNDU09OVTNNelBWaFNpK1drZ2ppalVKMEpRQVZ4UXVSS1U4UHorZnlXUzhibjZocVlybUtYNVJqMGRHME5JTitGWlJRWmltSkx5R1RFazRCNW1TY0E0eUplRWNaRXJDT2NpVWhIT1FLUW5uSUZNU3p1R2xLZGZYMTltTVFWSzFBdWhkOTlLVVh4cFozTDNidE9QL1RaWmt5dEJFcHJRRG1WSWpNcVVkeUpRYWtTbnRRS2JVaUV4cEJ6S2xSbVJLTzVBcE5TSlQyb0ZNcVJHWjBnNWtTbzNJbEhZZ1UycEVwclFEbVZJak1xVWR5SlFha1NudFFLYlVpRXhwQnpLbFJtUktPelJreXFlam8rZG5aeDhXRi9INnpjek14Y1hGZmpiTGR1Vnl1WnJQYWtOaUpHTUxhaU5MdVZ3K09EakE2OGNqSThnYnRhYXhJeUpUMnFFaFUzNWFYa2FXYjN0N2VNMGV3ZlBqK2hxdjJlSmN4N1hXNDhIeHNXdDlmUjJ2MmNMMjhPaHY5KysvbjV0anIrWEVyb2xNYVljWXBnUTFIMXVsTWFYQ3pjME5lL0RRYWZUS2tDNklUR21IaGt6NWJuYVdaNnVGdVNrRm92WjNVMlJLT3pSa3lvSCtmcmJJVWsyaHhhbWtoNGJ2bmtNVUpiUXNsZlJPaVV4cGg0Wk1HVU5pMWJDYTBpeWc2NExJbEhab3lKUjFGOUd1ZnJvdUMyNmlRREN1cEhkS1pFbzdOR1RLZzRNRG5pMkM2dW80bDh2eGZSRzR2QVlGbWRJT0RabXk3aU5HSjVKSkpVdmR4MHU3dkVnUG1kSU9EWm15N2pKeUNNL2w5S2pOK1k1b1hrOU95bG1jRXBuU0R1YW1SRkRDODl4UkxCWS9MUytuMDJuWnFjclJVQXJ5SFhkOFB6bjV2TEtDTm9EOGRQVDUrWGs1aTFNaVU5ckIzSlNKUklMbitiVkxVbDZ2WFJscG5KcWE0anR1YnhIeGlPMnBWSXB2dmIzRmE3SGROWkVwN1dCdVNqWXd5RUFaS2JZL0d4dmpXMjl2RHc4UHhYYm93K0lpMzNGN3k0YS9tZVFzc2xsZEU1blNEdWFtbEl1M2w5SjZaTU5EUTN6clhaMHV0a09iR3h0OFIzU1dtdU5Bam9oTWFRZHpVMll5R1o0bjJtRkt2eU1LVHI0ak9vdkw5MlNRS2UxZ2JrcTV4ekhLWVVEdVA1ZTdrRFJaeEhiWFJLYTBnN2twRVdqaklqSGtUdktIZlgxODZ4MTRLM1loN3VGYnRWbWM3VC9IdWZGL2s3Y0Vic291RkpuU0RtUktqY2lVZGlCVGFrU210RU9qcHF4ZVAxUklEbVhDRUpuU0RvMmE4dmo0T0pGSTRBWHJHR2Nka3dQOS9kaGVzOGNSeDBjeU50ZU1aU2tVQ25qTitzOXJabkZIWkVvN05HUktOa0hzeC9VMUxQWDk1SVFkQWEvUHo4N3dRbVBLL1d4Mklwa1Vkd3poOWRyYUdsNlFLZHROK0taY1dGamcyU1RnVWZaQ1k4b295SlR0Sm54VGJtOXZYMFNUeVdTVTlCQ2I5eDFGelN6dWlFeHBoNFpNMlcwaVU5cWhJVk0rSFIxOU56c2JKZmsrSUNGRVJVb3lXZFBUMDBwNnAwU210RU9qMVRmUEZzRnY5KzhyV1JEaThIMjFxRlFxU25xblJLYTBRME9tUERvNjR0a2lRSGl1WkNrV2kzeGZCQVA5L1VvV2QwU210RU5EcHJ5OHZPVFpJcWllT0ZaM1dzL3o4WEVsaXpzaVU5ckIzSlQzZW5wNG5talFUSlN6S05ONmF1SnlzNUpNYVFkelV6NGVHZUY1N203bS9iaTA5T2VUSisvbjVpNHVMdmpXcXFQSjAzcVE1YTlYcjlEb3hFWTVpOHRQQXlSVDJzSGNsTEFVei9QckJERjU3ZzZ1b3RpdTdKSW5pS0ZBNVZ0L1BpWFFUWkVwN1dCdVNuazRSNTZzemNZZUdZaUV4SGFJalNVeXBxYW14UGFubzZOODY4K25YYm9wTXFVZHpFMHBQMGdvYW03RCtkbVoyQTdKaTdoSFpjbm44Mks3YXlKVDJzSGNsSEtQWTVUREVHdUw3VkNoVU9BN29yT1VTaVd4M1RXUktlMWdia3E1eHpIS1lVRHVkeFQzYWdCTmx1b3VkMGRFcHJTRHVTbWZqNC9EV0V6eVZLL2UzbDR4YkFqSnN4bEZlaVVMWENqdklsTzJqOEJOMllVaVU5cUJUS2tSbWRJT1pFcU55SlIySUZOcVJLYTBBNWxTSXpLbEhjaVVHcEVwN1VDbTFJaE1hUWN5cFVaa1NqdVFLVFVpVTlxQlRLa1JtZElPWkVxTnlKUjJJRk5xUkthMEE1bFNJektsSGNpVUdwRXA3VUNtMUloTWFRZlhUUGwwZEhSNmVscSt3eEt2LzM3NzlxVjBqekEwa1V4MllHNHVtZElPcnBrUzVzTlp5WThJWkZNZmIyNXV4RzNDc0NPMktLdWJ0VU5rU2p1NFprbzJOL0pDV3ZGSnJOL3pmbTZPYmZtMHZJeTNIWmliUzZhMGcydW12TmZUZzBMeDh2SVNKd2JKazNTTHhTTGJ5S2F3ZFdENVd6S2xIVnd6SlpUUDUvbkphZW5BUTRqa1pmdzh4VXRUb2loU3JvUjF5UlBNTlhSZ25USTBiZm1IZVl1WHBrUU5wVndKNjNyWTEzZDBkUFRQMDZjak9EODc2OHpTOWZMYWtwNUNwZ3hOK0FId2Y1TzNrQ2xEVTkySGE3cVBsNmI4Zm5LaVhJbFdhWGhvNk5IZ29Md0ZrWFVpa1ZBZTNZdTNUMGRINVMyUFIwYmtwWEFoTkIrcm4xbUFaUEtoa0VVNU1zdWxORDF4VnVhTlVmNC84aGt2VGRtK1IvbXc1d0RLdlltc2Y1RXRVc2FFTkpWS1JTbXRkM2Qzc1ZFZXNHRlI4TmV0TGJHRnJZZ3ZwOEZlYkpFWEEyQWRPdkpUQzFrYXcvWW9MSTdFdnVPbEtVR2JucHJDbnBncVB4eFFOTkd3aTIyQi8vQldlVzdxNTVVVmJNUmY5bFk4ZUFpVnFUaFZkcWcvbnp4aGJ5RWNCRnMyTnpiWVd4VFNjRGJMSlo0a3cxWkpNK3hMd3NHUjJIZDhOYVY4YVZzbzFLYzQrSDQyaXpvVW1wcWFZaDhIVUdLeGphekFrNTkyQ2JGUnhDK3JxeXlOM0grT1FvNXRaSEd4L0hOaXg0Y3BXWUowT24yWDR4L2dWN2FSUFFYT3NQcCtNelBEc251TnI2WlVQTkZDbGN0bC9obGEwRHFVYzhtUFZOV2dQQXZUc0dBemI2N0l0dllYWDAzWnZ2NXpNV3l0QWRXcmtndmxIOStuUmJraHd6Q1grV3FRZGRkbjhRSmZUZG0rVlRzUjVmelQyYTJsNXMwK2NEUGZIVTMxQUduZEZWV0FhSFRXMWRYVkZjL2pNNzZhOHNmMXRXWnArZTZVeVdJclh1Q3JLWUhTVTBpU3d6S3Y4ZGlVb3YrRnhHUjRVNGo3ZUd4S3RPR1VxOUp1ZmR2YnkyUXk4ck9vMGJSRlFDMnY3cGhLcGZMNXZCeWJJOHYyOXJZODNvTzN5UFZTbWl6QlZoaHY4c1kyaythcEYzaHNTcUFNQ2JaYnJCOWJtR2tpbVdTbklRWmdXRGNua0RzajJkRE9tNWtaOWxaMEE0bG9TYXpWWno2V1dDMTVvVFRmOGR1VUtHQ1VhOU5Xc1JFL1VTNktIdkp5dWN5aUxqYVFjM3A2eWhJd0lYYkdSckVzS1FMd3UweS9ETnZnQ0NqbjJPdDRDcWJ1Qm42YnNuMTNadFFVR3hWa25UdEFYdHdFbHNJV1ZvSHVaN055THJicUdVdFFNeGVvVkNvSEJ3ZHlya2FGOWdBL3FQLzRiVXJ3Ykd4TXVUenQwK3ZKU2Y2cFdwU09mVlQzZkllV2REb3Q1MnBJaHVOSnZ1QzlLWGQzZDVVcjFENE45UGViREVLSzVpT1RhR2pxZWZmckNzOE5LYVM2RzNodlNyVE1sRnNTMnlvMEtNV1NVRkdxUGg4bFFiV21wNmRqandYZzQvQlA0UCtPSVBEZWxNREJ5WTJkbElpY2dpRUVVeUowNkdSaDZaUVF2eHZlMXVRUklaZ1N5RGQ0T3lKRVlFcS9JMzQ1ZjcxNkpXOXBYaDhXRi9tL0lDQUNNV1dsVXBHSFZUb3NGbC9MZlRwc0dCcGxtT2hGVHlRU0tORmJ1MUE0RGw0cWxlNytBVUVSaUNsQmsvMTh6WWpGMXhmU3M0VEVFd0hFakJ4V3BMVjJIbVlZdC9SV0U0NHBnVHducThOQ29WZ29GRkJrUWhQSkpKdHFBOUN1R0I0YWdoQmk0NjB5czZjWlBSOGZGNThTR0VHWjh1cnFTcjd2b1pNeXVWOGR0R29XQnlydUFKNkVFVVZRcGdUZjl2YVU2OWNac2FteGRVR1JxV1NNSnphZUhpcWhtUkxJMDZnN0pqWXNyZ2VCanBJcm5nekhMZjBsUUZQaTJnZDhVL3BBZjMrUUViZE1nS1lFQ0lSdE5TN2JxdDdlM21LeHlMOWt1SVJwU25CMGRCVFl6REo4blRCbTBOWWxXRk9DVENZVGtpOE5ZNmtBQ05tVUFNRjRHTDRNNzY0TERZR2JFZ1RneTFRcXhiOU1keEMrS1lHL3ZzUnBzNGU4ZFJWZFlVcmdveThSYXdmd1ZQMFlkSXNwQVh3cHozeDFYSThHQndNZVNOVFRSYVlFdU15ZG5HZ1dXNjhuSjRQdklkZlFYYVlFbFVvRmtheXpWZm52RHg1MFQ5ZFBGRjFuU2tZdWw3TjRVM0NVVUVDeW1lTmRUcGVhRXZ5NHZsNVlXRkJzWVV0VVFNcDByeWtaaDRlSGRsdVppTDArTEM1MmN3dXltbTQzSmVQNCtMamxVN3JxcXJlM2wreFlFekxsdnhRS2hXWWVDbUF1Vk5ZSXRzS2JHdHNxeUpRcTUyZG43K2ZtMmpTUi9QSElTQ3FWSWp2cUlWTkdnb0p6YlcxdElwbHNzc3Y5WVYvZm01a1p4REVVV1J0Q3Bxd1A0blRFUTJqL0pSS0o0YUdodWg2RkMxRWlvcEVLVHhzdVRrL0lrQ25qQUp0ZVhGd2dQUHEydDRjaUVNQzE4QjgyOGhSRUU1QXBDZWNnVXhMT1FhWWtuSU5NU1RnSG1aSndEaklsNFJ4a1NzSTV5SlNFYzVBcENlY2dVeExPUWFZa25JTk1TVGpHN2UzL0FTWUxCanNLWlc1a2MzUnlaV0Z0Q21WdVpHOWlhZ28wSURBZ2IySnFDanc4TDB4bGJtZDBhQ0ExTlRrdlJtbHNkR1Z5TDBac1lYUmxSR1ZqYjJSbEwxSmxjMjkxY21ObGN6dzhMMFp2Ym5ROFBDOUdNU0ExSURBZ1VpOUdNaUEySURBZ1VqNCtQajR2Vkhsd1pTOVlUMkpxWldOMEwxTjFZblI1Y0dVdlJtOXliUzlDUW05NFd6QWdNQ0E0TkRJZ05UazFYUzlOWVhSeWFYaGJNU0F3SURBZ01TQXdJREJkTDBadmNtMVVlWEJsSURFK1BuTjBjbVZoYlFwNG5KV1UzMjdUTUJURzcvTVV2aHhDRGZheGovL3NyclFaNnpTNnNlWUNDYUhLY1p4UnBMVmJOZ1F2dWF1OUVDZHBDMDFUQ3FTUmJFWG4rMzdmc1kvNmtMek5FNE5NT1dSNW1YQTJFR2E5NGMzeTVneVlBSlpYeVFsN2xYL2RmdDVmQnIvVXV2MlM1Y21INUNIaHFiRktDcmEvMXJjdDBsaG13REFDMWpHcFdnV3dDM0o1UjBwazMvdEZNeXFpdk9SRVA4RWtRQ3FveGhMMGpyS0tiZGJuNlhneXl0ZzRZOW5INjJ3OHlhWTViUyt6VVg3ek1wMk1ycHBXS09ORGg5bXhObzRwYmJhMnRuVzlpVldzNHpJcy9PbkdZRWNBYU5NbXI3WnJFV3hFMld3K0ZJcHpjRnJNZ1FPZlU2UzUwTHh2MFRCUmRaa3Y5YTFmcmg2UEFCRzd3QXRPajNaY0hnWW8wUVZjMTZzUXk4WGRJaTZmVmtjd0Nyb1lBVkxoWVFUWUx1SXNoaStlRGU5ai9mU3Q5aXo3Y1U5QXdrV1dUU2RIa09DNnlPYjBCbHdPT09TY243WnZTcjIrNW9KMmg2TUk3RWFaRUxXT2o3NzhmYVIvRzFPSmpvR3dLZVZTNjBFOVVnOU9VbUVyUVpVcS9CY05LcE1pSGhMOWNUb3RNWXpzdG5aNDB0c3VkMlc2dmYvL0dVdnBtdWI3dk12c1BkR3UrZ0t0WmFwVVgzRStuSjMzcXgxNXE3MmJGaWtiTVBhcEh4SzArZHkzVU8zMTlGMzZsWWcwTXRBdmxWb0hIUU9VM3FHcWRPR0ZWNktLTlBXOGdNSm9nYUpFNzZ2U0I0cFRGaEk5cUVCWFdGVzdCOXpZYThla2JQODVUcndHOU1HQURTWkVoVkZXeXBNOEdGMlNrWW1heHdpK0FLWFE2T2dER2hHRDlZWGM5ZFRLcFpRWWNHMVpWbGlVdnZDRmpadjJmZ0laR2tsWkNtVnVaSE4wY21WaGJRcGxibVJ2WW1vS055QXdJRzlpYWdvOFBDOVFjbTlrZFdObGNpaHBWR1Y0ZEs0Z05TNDFMamtncVRJd01EQXRNakF4TlNCcFZHVjRkQ0JIY205MWNDQk9WaUJjS0VGSFVFd3RkbVZ5YzJsdmJsd3BPeUJ0YjJScFptbGxaQ0IxYzJsdVp5QnBWR1Y0ZEs0Z05TNDFMamtncVRJd01EQXRNakF4TlNCcFZHVjRkQ0JIY205MWNDQk9WaUJjS0VGSFVFd3RkbVZ5YzJsdmJsd3BLUzlEY21WaGRHbHZia1JoZEdVb1JEb3lNREl3TURNd01qRTNNekV5TkNzd01TY3dNQ2NwTDAxdlpFUmhkR1VvUkRveU1ESXdNRE13TWpFM016RXlOQ3N3TVNjd01DY3BQajRLWlc1a2IySnFDamdnTUNCdlltb0tQRHd2VEdWdVozUm9JREV3TDBacGJIUmxjaTlHYkdGMFpVUmxZMjlrWlQ0K2MzUnlaV0Z0Q25pY0srUUNBQUR1QUh3S1pXNWtjM1J5WldGdENtVnVaRzlpYWdvNUlEQWdiMkpxQ2p3OEwweGxibWQwYUNBeU5Ea3ZSbWxzZEdWeUwwWnNZWFJsUkdWamIyUmxQajV6ZEhKbFlXMEtlSnh0a0UxT3d6QVFoZmMreFZ2Q0pzdzRHYnRsQjJxRWhJVFUwaXk2aXlySFZLNmFCS3BXY0VrT3dSbDZBWWFJUDdYVlNKNW4rMzNqSjJObVhyUytWb3Q3UTdoVFJZTmFHOG9FcjhPWkZ3aVBNMjJ0R1pIOTJXek1YRkdGSVFMUzB1WTl4T1lJTGE0V2lURHBNVE8zbGVIaG5zRzVaT3dnaFVmVkdyVXdWRDJaaThlNFNvY09UY1REZmh2UzhySmFtN0w2aitiT1p5T0lvMStTN1lDZVdyM1Q3TG0rd245ZUdyelRqMVhxbHVCVFJncVhpVFpyajVueTdUazJLWGE3aUhJVHcyNTc2RkxvcjFITzZ4c3VpT3pZY1czSlVsMHVwalU3T2hOSVAwekRDT1hId3lkOTJMYzZ1OGQ3MTZRUXY5bVorUVQreFdEaENtVnVaSE4wY21WaGJRcGxibVJ2WW1vS01USWdNQ0J2WW1vS1BEd3ZUR1Z1WjNSb0lEVTFPUzlHYVd4MFpYSXZSbXhoZEdWRVpXTnZaR1UrUG5OMGNtVmhiUXA0bkpXVTMyN1RNQlRHNy9NVXZoeENEZmF4ai8vc3JyUVo2elM2c2VZQ0NhSEtjWnhScExWYk5nUXZ1YXU5RUNkcEMwMVRDcVNSYkVYbiszN2ZzWS82a0x6TkU0Tk1PV1I1bVhBMkVHYTk0YzN5NWd5WUFKWlh5UWw3bFgvZGZ0NWZCci9VdXYyUzVjbUg1Q0hocWJGS0NyYS8xcmN0MGxobXdEQUMxakdwV2dXd0MzSjVSMHBrMy90Rk15cWl2T1JFUDhFa1FDcW94aEwwanJLS2JkYm42WGd5eXRnNFk5bkg2Mnc4eWFZNWJTK3pVWDd6TXAyTXJwcFdLT05EaDlteE5vNHBiYmEydG5XOWlWV3M0eklzL09uR1lFY0FhTk1tcjdackVXeEUyV3crRklwemNGck1nUU9mVTZTNTBMeHYwVEJSZFprdjlhMWZyaDZQQUJHN3dBdE9qM1pjSGdZbzBRVmMxNnNReThYZElpNmZWa2N3Q3JvWUFWTGhZUVRZTHVJc2hpK2VEZTlqL2ZTdDlpejdjVTlBd2tXV1RTZEhrT0M2eU9iMEJsd09PT1NjbjdadlNyMis1b0oyaDZNSTdFYVpFTFdPajc3OGZhUi9HMU9Kam9Hd0tlVlM2MEU5VWc5T1VtRXJRWlVxL0JjTktwTWlIaEw5Y1RvdE1ZenN0blo0MHRzdWQyVzZ2Zi8vR1V2cG11Yjd2TXZzUGRHdStnS3RaYXBVWDNFK25KMzNxeDE1cTcyYkZpa2JNUGFwSHhLMCtkeTNVTzMxOUYzNmxZZzBNdEF2bFZvSEhRT1UzcUdxZE9HRlY2S0tOUFc4Z01Kb2dhSkU3NnZTQjRwVEZoSTlxRUJYV0ZXN0I5ellhOGVrYlA4NVRyd0c5TUdBRFNaRWhWRld5cE04R0YyU2tZbWF4d2krQUtYUTZPZ0RHaEdEOVlYYzlkVEtwWlFZY0cxWlZsaVV2dkNGalp2MmZnSVpHa2xaQ21WdVpITjBjbVZoYlFwbGJtUnZZbW9LTVRVZ01DQnZZbW9LUER3dlZIbHdaUzlEWVhSaGJHOW5MMUJoWjJWeklERXpJREFnVWk5V1pYSnphVzl1THpFdU56NCtDbVZ1Wkc5aWFnb3pJREFnYjJKcUNqdzhMMHhsYm1kMGFDQXlNekl2Um1sc2RHVnlMMFpzWVhSbFJHVmpiMlJsTDFSNWNHVXZUMkpxVTNSdEwwNGdOeTlHYVhKemRDQTBNejQrYzNSeVpXRnRDbmljMVpITmFzTXdFSVJmWlY2Z3JGYTI4Z1BCRUllR1FDa3RhYUVHazROakwwRWxTQ1dTUy92MmxSeDY2YTNRUzAvYS9UUWFEWXlHZ3NHOHdBeHNHS3lnZFFsbUZFcURDeFJ6QXk1UnNzWnFSYytmYjBKYjd5STlqY2VZbDB5WTZpN0loSGR5ZnBkbys0NXVYZThINjA3MFl0M2FCZnU5VjlYdmpHNXFmeDcrek8wZngzcnNUaEpvNDBjWHdYUm5oOUNtWWhUMmh4OGl1cGZCZHJYL2FGVzZYcFFhWm1rT3RKZmd4MHN2SVduejcvbVlDazhXdE5XNTh6dzFscUh6VkZYVVBCeGZwYy9LeGlyd2xTYStTYy9GeGRBdU1nSlBlaXluTUNuQ1JYTEU0aXJIRjF0RndwQUtaVzVrYzNSeVpXRnRDbVZ1Wkc5aWFnb3hOaUF3SUc5aWFnbzhQQzlNWlc1bmRHZ2dOamN2Um1sc2RHVnlMMFpzWVhSbFJHVmpiMlJsTDFOcGVtVWdNVGN2VW05dmRDQXhOU0F3SUZJdlNXNW1ieUEzSURBZ1VpOUpSQ0JiUERKbFltUXdaamxqTkRCaU9EVXhZVFU0WW1Jek9XRTJNek14WW1GbVpqQTRQancwTkRsa1pUVmpORFUyWWpBeVl6VTVNbUk1TlRoa1lXWTROVFkwTURSaE1qNWRMMWRiTVNBeUlESmRMMVI1Y0dVdldGSmxaaTlKYm1SbGVGc3dJREUzWFQ0K2MzUnlaV0Z0Q25pY1kyQmcrUCtma1lHZmdZR0pnWm1CZ1ZIMktwQVF2UUxoTW9JSUprYUpYVUF4eWZrZzRqVkVnaGxFc0RCS3EwTzRyQ0NDalZGMkZnTUkvUDhQQUtZZkNhNEtaVzVrYzNSeVpXRnRDbVZ1Wkc5aWFnb2xhVlJsZUhRdE5TNDFMamtLYzNSaGNuUjRjbVZtQ2pjNU5qRUtKU1ZGVDBZSzwvbnM2OlZhbG9yQmluYXJpbz4KICAgICAgICA8bnM2Ok5vbWJyZUZvcm1hdG8+UERGPC9uczY6Tm9tYnJlRm9ybWF0bz4KICAgIDwvbnM3OlZpc3VhbGl6YWNpb25JbmRpY2U+CjwvbnM3OmV4cGVkaWVudGU+Cgo=</exp:expedienteEniBytes>";
  final String DocumentoEniXml =
      "";
  
  TipoExpedienteEniFileInsideConDocumentos expedienteEniFile;
  
  public String aplicacion = "prueba";
  
  

  @Before
  public void prepararDatos() {

    INFO_CREDENCIALES = new WSCredentialInside();
    INFO_CREDENCIALES.setIdaplicacion(aplicacion);
    INFO_CREDENCIALES.setPassword("test");

    UsernamePasswordAuthenticationToken authReq = new UsernamePasswordAuthenticationToken(
        INFO_CREDENCIALES.getIdaplicacion(), INFO_CREDENCIALES.getPassword());
    TestingAuthenticationProvider authManagerTest = new TestingAuthenticationProvider();
    Authentication auth = authManagerTest.authenticate(authReq);

    SecurityContextHolder.getContext().setAuthentication(auth);

  }

  @Test
  public void generarCredencialesAccesoExpedienteTest() {
    String apli = aplicacion;
    String identificador = "ES_A14002961_2020_EXP_162";
    String emails = "alejandro.paredes-romera@capgemini.com;alexjandro877@gmail.com";
    String asuntoMail = "test credenciales";
    String dir3 = "E04975701";
    String NIFs = "48556839K";
    String fechaCaducidad = "2020-04-01";
    System.out.println("-------------------------------------------Inicio test credenciales todo bien-------------------------------------------");

    try {
      TokenExpediente respuesta = insideOperationWebServiceImpl.getCredencialesAccesoExpediente(
          apli, identificador, emails, asuntoMail, dir3, NIFs, fechaCaducidad);

      assertNotNull(respuesta);
      System.out.println("identificador -->" + respuesta.getIdentificador());
      System.out.println("csv -->" + respuesta.getCsv());
      System.out.println("uuid -->" + respuesta.getUuid());
      System.out.println("fichero -->" + respuesta.getFichero());
      System.out.println("resultado correo -->" + respuesta.getResultadoEnvioCorreo());

    } catch (InsideWSException e) {
      System.out.println(e.getMessage());
      assertFalse(true);
    }
  }

  @Test
  public void generarCredencialesAccesoExpedienteSinNIFniDIR3Test() {
    String apli = aplicacion;
    String identificador = "ES_A14002961_2020_EXP_162";
    String emails = "alejandro.paredes-romera@capgemini.com";
    String asuntoMail = "-------------------------------------------inicio test credenciales sin nif ni dir3-------------------------------------------";
    String dir3 = "";
    String NIFs = "";
    String fechaCaducidad = "2020-04-01";
    System.out.println("Inicio test sin NIF ni DIR3");

    try {
      TokenExpediente respuesta = insideOperationWebServiceImpl.getCredencialesAccesoExpediente(
          apli, identificador, emails, asuntoMail, dir3, NIFs, fechaCaducidad);

      System.out.println("Debería salir una excepcion " + respuesta.getIdentificador());
      assertFalse(true);

    } catch (InsideWSException e) {
      System.out.println("código de error: " + e.getFaultInfo().getCodigo());
      System.out.println("descripcion: " + e.getFaultInfo().getDescripcion());
      if ((e.getFaultInfo().getDescripcion())
          .equals(InsideWsErrors.DIR3_NIF_NECESARIO.getValue().getDescripcion())
          && e.getFaultInfo().getCodigo() == 417)
        assertTrue(true);
      else
        assertFalse(true);
    }
  }

  @Test
  public void generarCredencialesAccesoExpedienteMalNIFTest() {
    String apli = aplicacion;
    String identificador = "ES_A14002961_2020_EXP_162";
    String emails = "alejandro.paredes-romera@capgemini.com";
    String asuntoMail = "test credenciales";
    String dir3 = "E04975701";
    String NIFs = "48556839K;1123jjek;niffalso";
    String fechaCaducidad = "2020-04-01";
    System.out.println("-------------------------------------------Inicio test credeniales nif mal puesto-------------------------------------------");

    try {
      TokenExpediente respuesta = insideOperationWebServiceImpl.getCredencialesAccesoExpediente(
          apli, identificador, emails, asuntoMail, dir3, NIFs, fechaCaducidad);

      System.out.println("Debería salir una excepcion " + respuesta.getIdentificador());
      assertFalse(true);

    } catch (InsideWSException e) {
      System.out.println("código de error: " + e.getFaultInfo().getCodigo());
      System.out.println("descripcion: " + e.getFaultInfo().getDescripcion());
      if ((e.getFaultInfo().getDescripcion()).equals(
          InsideWsErrors.NIF_MALFORMADO.getValue().getDescripcion() + " : 1123jjek, niffalso")
          && e.getFaultInfo().getCodigo() == 415)
        assertTrue(true);
      else
        assertFalse(true);
    }
  }

  @Test
  public void generarCredencialesAccesoExpedienteMalMailTest() {
    String apli = aplicacion;
    String identificador = "ES_A14002961_2020_EXP_162";
    String emails = "emailMalo;alejandro.paredes-romera@capgemini.com;emailMalo@;@emailMalo.com";
    String asuntoMail = "test credenciales";
    String dir3 = "E04975701";
    String NIFs = "48556839K";
    String fechaCaducidad = "2020-04-01";
    System.out.println("-------------------------------------------Inicio test credenciales mail mal puesto-------------------------------------------");

    try {
      TokenExpediente respuesta = insideOperationWebServiceImpl.getCredencialesAccesoExpediente(
          apli, identificador, emails, asuntoMail, dir3, NIFs, fechaCaducidad);

      System.out.println("Debería salir una excepcion " + respuesta.getIdentificador());
      assertFalse(true);

    } catch (InsideWSException e) {
      System.out.println("código de error: " + e.getFaultInfo().getCodigo());
      System.out.println("descripcion: " + e.getFaultInfo().getDescripcion());
      if ((e.getFaultInfo().getDescripcion())
          .equals(InsideWsErrors.MAIL_MALFORMADO.getValue().getDescripcion()
              + " : emailMalo, emailMalo@, @emailMalo.com")
          && e.getFaultInfo().getCodigo() == 416)
        assertTrue(true);
      else
        assertFalse(true);
    }
  }

  @Test
  public void generarCredencialesAccesoExpedienteMalFechaTest() {
    String apli = aplicacion;
    String identificador = "ES_A14002961_2020_EXP_162";
    String emails = "alejandro.paredes-romera@capgemini.com";
    String asuntoMail = "test credenciales";
    String dir3 = "E04975701";
    String NIFs = "48556839K";
    String fechaCaducidad = "01/01/2020";
    System.out.println("-------------------------------------------Inicio test credenciales fecha mal puesta-------------------------------------------");

    try {
      TokenExpediente respuesta = insideOperationWebServiceImpl.getCredencialesAccesoExpediente(
          apli, identificador, emails, asuntoMail, dir3, NIFs, fechaCaducidad);

      System.out.println("Debería salir una excepcion " + respuesta.getIdentificador());
      assertFalse(true);

    } catch (InsideWSException e) {
      System.out.println("código de error: " + e.getFaultInfo().getCodigo());
      System.out.println("descripcion: " + e.getFaultInfo().getDescripcion());
      if ((e.getFaultInfo().getDescripcion())
          .equals(InsideWsErrors.FECHA_MALFORMATO.getValue().getDescripcion() + " : 01/01/2020")
          && e.getFaultInfo().getCodigo() == 418)
        assertTrue(true);
      else
        assertFalse(true);
    }
  }
}
