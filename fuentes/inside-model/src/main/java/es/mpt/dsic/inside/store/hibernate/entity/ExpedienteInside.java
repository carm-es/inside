/*
 * Copyright (C) 2016 MINHAP, Gobierno de Espa√±a This program is licensed and may be used, modified
 * and redistributed under the terms of the European Public License (EUPL), either version 1.1 or
 * (at your option) any later version as soon as they are approved by the European Commission.
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and more details. You
 * should have received a copy of the EUPL1.1 license along with this program; if not, you may find
 * it at http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 */

package es.mpt.dsic.inside.store.hibernate.entity;

// Generated 28-ago-2012 18:17:29 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;
import es.mpt.dsic.inside.util.InsideUtils;

/**
 * ExpedienteInside generated by hbm2java
 */
@Entity
@Table(name = "ExpedienteInside",
    uniqueConstraints = @UniqueConstraint(columnNames = {"identificador", "version"}))
public class ExpedienteInside implements java.io.Serializable {

  /**
   * 
   */
  private static final long serialVersionUID = 2702214007479040454L;
  private Integer id;
  private int version;
  private ExpedienteInsideIndice expedienteInsideIndice;
  private String identificador;
  private String identificadorRepositorio;
  private Date fechaVersion;
  private String versionNti;
  private Date fechaAperturaExpediente;
  private String clasificacion;
  private String estado;
  private Date createdAt;
  private Date fechaBaja;
  private Set<ExpedienteInsideIndiceFirmas> expedienteInsideIndiceFirmases =
      new HashSet<ExpedienteInsideIndiceFirmas>(0);
  private Set<ExpedienteInsideOrgano> expedienteInsideOrganos =
      new HashSet<ExpedienteInsideOrgano>(0);
  private Set<ExpedienteInsideMetadatosAdicionales> expedienteInsideMetadatosAdicionaleses =
      new HashSet<ExpedienteInsideMetadatosAdicionales>(0);
  private Set<ExpedienteInsideRespuestaEnvioJusticia> expedienteInsideRespuestaEnvioJusticia =
      new HashSet<ExpedienteInsideRespuestaEnvioJusticia>(0);
  private Set<ExpedienteInsideIndice> expedienteInsideIndices =
      new HashSet<ExpedienteInsideIndice>(0);
  private Set<ExpedienteInsideInteresado> expedienteInsideInteresados =
      new HashSet<ExpedienteInsideInteresado>(0);

  private ExpedienteUnidad expedienteUnidad;

  public ExpedienteInside() {}

  public ExpedienteInside(ExpedienteInsideIndice expedienteInsideIndice, String identificador,
      Date fechaVersion) {
    this.expedienteInsideIndice = expedienteInsideIndice;
    this.identificador = identificador;
    this.fechaVersion = fechaVersion;
  }

  public ExpedienteInside(ExpedienteInsideIndice expedienteInsideIndice, String identificador,
      String identificadorRepositorio, Date fechaVersion, String versionNti,
      Date fechaAperturaExpediente, String clasificacion, String estado, Date createdAt,
      Set<ExpedienteInsideIndiceFirmas> expedienteInsideIndiceFirmases,
      Set<ExpedienteInsideOrgano> expedienteInsideOrganos,
      Set<ExpedienteInsideMetadatosAdicionales> expedienteInsideMetadatosAdicionaleses,
      Set<ExpedienteInsideRespuestaEnvioJusticia> expedienteInsideRespuestaEnvioJusticia,
      Set<ExpedienteInsideIndice> expedienteInsideIndices,
      Set<ExpedienteInsideInteresado> expedienteInsideInteresados) {
    this.expedienteInsideIndice = expedienteInsideIndice;
    this.identificador = identificador;
    this.identificadorRepositorio = identificadorRepositorio;
    this.fechaVersion = fechaVersion;
    this.versionNti = versionNti;
    this.fechaAperturaExpediente = fechaAperturaExpediente;
    this.clasificacion = clasificacion;
    this.estado = estado;
    this.createdAt = createdAt;
    this.expedienteInsideIndiceFirmases = expedienteInsideIndiceFirmases;
    this.expedienteInsideOrganos = expedienteInsideOrganos;
    this.expedienteInsideMetadatosAdicionaleses = expedienteInsideMetadatosAdicionaleses;
    this.expedienteInsideRespuestaEnvioJusticia = expedienteInsideRespuestaEnvioJusticia;
    this.expedienteInsideIndices = expedienteInsideIndices;
    this.expedienteInsideInteresados = expedienteInsideInteresados;
  }

  /*
   * @Id
   * 
   * @GeneratedValue(strategy = IDENTITY)
   */

  @Id
  @TableGenerator(name = "GeneradorPk_ExpedienteInside", table = "GeneradorClaves",
      pkColumnName = "GenName", valueColumnName = "GenValue",
      pkColumnValue = "GEN_ExpedienteInside", allocationSize = 1)
  @GeneratedValue(strategy = GenerationType.TABLE, generator = "GeneradorPk_ExpedienteInside")
  @Column(name = "id", unique = true, nullable = false)
  public Integer getId() {
    return this.id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  @Version
  @Column(name = "version", nullable = false)
  public int getVersion() {
    return this.version;
  }

  public void setVersion(int version) {
    this.version = version;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "id_indice", nullable = false)
  public ExpedienteInsideIndice getExpedienteInsideIndice() {
    return this.expedienteInsideIndice;
  }

  public void setExpedienteInsideIndice(ExpedienteInsideIndice expedienteInsideIndice) {
    this.expedienteInsideIndice = expedienteInsideIndice;
  }

  @Column(name = "identificador", nullable = false)
  public String getIdentificador() {
    return this.identificador;
  }

  public void setIdentificador(String identificador) {
    this.identificador = identificador;
  }

  @Column(name = "identificador_repositorio")
  public String getIdentificadorRepositorio() {
    return this.identificadorRepositorio;
  }

  public void setIdentificadorRepositorio(String identificadorRepositorio) {
    this.identificadorRepositorio = identificadorRepositorio;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "fechaVersion", nullable = false, length = 19)
  public Date getFechaVersion() {
    return this.fechaVersion;
  }

  public void setFechaVersion(Date fechaVersion) {
    this.fechaVersion = fechaVersion;
  }

  @Column(name = "versionNti")
  public String getVersionNti() {
    return this.versionNti;
  }

  public void setVersionNti(String versionNti) {
    this.versionNti = versionNti;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "fechaAperturaExpediente", length = 19)
  public Date getFechaAperturaExpediente() {
    return this.fechaAperturaExpediente;
  }

  public void setFechaAperturaExpediente(Date fechaAperturaExpediente) {
    this.fechaAperturaExpediente = fechaAperturaExpediente;
  }

  @Column(name = "clasificacion")
  public String getClasificacion() {
    return this.clasificacion;
  }

  public void setClasificacion(String clasificacion) {
    this.clasificacion = clasificacion;
  }

  @Column(name = "estado")
  public String getEstado() {
    return this.estado;
  }

  public void setEstado(String estado) {
    this.estado = estado;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "created_at", length = 19)
  public Date getCreatedAt() {
    return this.createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "fechaBaja", length = 19)
  public Date getFechaBaja() {
    return fechaBaja;
  }

  public void setFechaBaja(Date fechaBaja) {
    this.fechaBaja = fechaBaja;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "expedienteInside")
  public Set<ExpedienteInsideIndiceFirmas> getExpedienteInsideIndiceFirmases() {
    return this.expedienteInsideIndiceFirmases;
  }

  public void setExpedienteInsideIndiceFirmases(
      Set<ExpedienteInsideIndiceFirmas> expedienteInsideIndiceFirmases) {
    this.expedienteInsideIndiceFirmases = expedienteInsideIndiceFirmases;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "expedienteInside")
  public Set<ExpedienteInsideOrgano> getExpedienteInsideOrganos() {
    return this.expedienteInsideOrganos;
  }

  public void setExpedienteInsideOrganos(Set<ExpedienteInsideOrgano> expedienteInsideOrganos) {
    this.expedienteInsideOrganos = expedienteInsideOrganos;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "expedienteInside")
  public Set<ExpedienteInsideMetadatosAdicionales> getExpedienteInsideMetadatosAdicionaleses() {
    return this.expedienteInsideMetadatosAdicionaleses;
  }

  public void setExpedienteInsideMetadatosAdicionaleses(
      Set<ExpedienteInsideMetadatosAdicionales> expedienteInsideMetadatosAdicionaleses) {
    this.expedienteInsideMetadatosAdicionaleses = expedienteInsideMetadatosAdicionaleses;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "expedienteInside")
  public Set<ExpedienteInsideRespuestaEnvioJusticia> getExpedienteInsideRespuestaEnvioJusticia() {
    return this.expedienteInsideRespuestaEnvioJusticia;
  }

  public void setExpedienteInsideRespuestaEnvioJusticia(
      Set<ExpedienteInsideRespuestaEnvioJusticia> expedienteInsideRespuestaEnvioJusticia) {
    this.expedienteInsideRespuestaEnvioJusticia = expedienteInsideRespuestaEnvioJusticia;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "expedienteInside")
  public Set<ExpedienteInsideIndice> getExpedienteInsideIndices() {
    return this.expedienteInsideIndices;
  }

  public void setExpedienteInsideIndices(Set<ExpedienteInsideIndice> expedienteInsideIndices) {
    this.expedienteInsideIndices = expedienteInsideIndices;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "expedienteInside")
  public Set<ExpedienteInsideInteresado> getExpedienteInsideInteresados() {
    return this.expedienteInsideInteresados;
  }

  public void setExpedienteInsideInteresados(
      Set<ExpedienteInsideInteresado> expedienteInsideInteresados) {
    this.expedienteInsideInteresados = expedienteInsideInteresados;
  }

  @Override
  public String toString() {
    StringBuffer sb = new StringBuffer("Entity ExpedienteInside=[");
    String coma = ", ";

    sb.append("id=" + id + coma);
    sb.append("version=" + version + coma);
    sb.append("expedienteInsideIndice=" + expedienteInsideIndice.toString() + coma);
    sb.append("identificador=" + identificador + coma);
    sb.append("identificadorRepositorio=" + identificadorRepositorio + coma);
    sb.append("fechaVersion=" + InsideUtils.dateToStringISO8601(fechaVersion) + coma);
    sb.append("versionNti=" + versionNti + coma);
    sb.append("fechaAperturaExpediente=" + InsideUtils.dateToStringISO8601(fechaAperturaExpediente)
        + coma);
    sb.append("clasificacion=" + clasificacion + coma);
    sb.append("estado=" + estado + coma);
    sb.append("createdAt=" + InsideUtils.dateToStringISO8601(createdAt) + coma);

    if (expedienteInsideIndiceFirmases == null) {
      sb.append("expedienteInsideIndiceFirmases=null" + coma);
    } else {
      sb.append("expedienteInsideIndiceFirmases=<");
      for (ExpedienteInsideIndiceFirmas expedienteInsideIndiceFirmas : expedienteInsideIndiceFirmases) {
        sb.append(expedienteInsideIndiceFirmas.toString() + coma);
      }
      sb.append(">");
    }

    if (expedienteInsideOrganos == null) {
      sb.append("expedienteInsideOrganos=null" + coma);
    } else {
      sb.append("expedienteInsideOrganos=<");
      for (ExpedienteInsideOrgano expedienteInsideOrgano : expedienteInsideOrganos) {
        sb.append(expedienteInsideOrgano.toString() + coma);
      }
      sb.append(">");
    }

    if (expedienteInsideMetadatosAdicionaleses == null) {
      sb.append("expedienteInsideMetadatosAdicionaleses=null" + coma);
    } else {
      sb.append("expedienteInsideMetadatosAdicionaleses=<");
      for (ExpedienteInsideMetadatosAdicionales expedienteInsideMetadatosAdicionales : expedienteInsideMetadatosAdicionaleses) {
        sb.append(expedienteInsideMetadatosAdicionales.toString() + coma);
      }
      sb.append(">");
    }

    if (expedienteInsideRespuestaEnvioJusticia == null) {
      sb.append("expedienteInsideRespuestaEnvioJusticia=null" + coma);
    } else {
      sb.append("expedienteInsideRespuestaEnvioJusticia=<");
      for (ExpedienteInsideRespuestaEnvioJusticia expedienteInsideRespuestaEnvioJusticiaItertor : expedienteInsideRespuestaEnvioJusticia) {
        sb.append(expedienteInsideRespuestaEnvioJusticiaItertor.toString() + coma);
      }
      sb.append(">");
    }

    if (expedienteInsideIndices == null) {
      sb.append("expedienteInsideIndices=null" + coma);
    } else {
      sb.append("expedienteInsideIndices=<");
      for (ExpedienteInsideIndice expedienteInsideIndice : expedienteInsideIndices) {
        sb.append(expedienteInsideIndice.toString() + coma);
      }
      sb.append(">");
    }

    if (expedienteInsideInteresados == null) {
      sb.append("expedienteInsideInteresados=null" + coma);
    } else {
      sb.append("expedienteInsideInteresados=<");
      for (ExpedienteInsideInteresado expedienteInsideInteresado : expedienteInsideInteresados) {
        sb.append(expedienteInsideInteresado.toString() + coma);
      }
      sb.append(">");
    }

    sb.append("]");
    return sb.toString();

  }

  public ExpedienteUnidad getExpedienteUnidad() {
    return expedienteUnidad;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "documentoInside")
  public void setExpedienteUnidad(ExpedienteUnidad expedienteUnidad) {
    this.expedienteUnidad = expedienteUnidad;
  }

}
