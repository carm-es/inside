/* Copyright (C) 2016 MINHAP, Gobierno de Espa√±a
   This program is licensed and may be used, modified and redistributed under the terms
   of the European Public License (EUPL), either version 1.1 or (at your
   option) any later version as soon as they are approved by the European Commission.
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   or implied. See the License for the specific language governing permissions and
   more details.
   You should have received a copy of the EUPL1.1 license
   along with this program; if not, you may find it at
   http://joinup.ec.europa.eu/software/page/eupl/licence-eupl */

package es.mpt.dsic.inside.store.hibernate.entity;

// Generated 28-ago-2012 18:17:29 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import es.mpt.dsic.inside.util.InsideUtils;

/**
 * DocumentoInside generated by hbm2java
 */
@Entity
@Table(name = "DocumentoInside", uniqueConstraints = @UniqueConstraint(columnNames = {
		"identificador", "version" }))
public class DocumentoInside implements java.io.Serializable {

	
	/**
	 * 
	 */
	private static final long serialVersionUID = -5836124844345985512L;
	private Integer id;
	private int version;
	private String identificador;
	private String identificadorRepositorio;
	private Date fechaVersion;
	private String versionNti;
	private Date fechaCaptura;
	private Boolean origenCiudadanoAdministracion;
	private String nombreFormato;
	private String tipoMime;
	private String tipoDocumental;
	private String estadoElaboracion;
	private String identificadorDocumentoOrigen;
	private String identificadorEnDocumento;
	private String referencia;
	private Date createdAt;
	private Date fechaBaja;
	private Set<DocumentoInsideOrgano> documentoInsideOrganos = new HashSet<DocumentoInsideOrgano>(
			0);
	private Set<DocumentoInsideMetadatosAdicionales> documentoInsideMetadatosAdicionaleses = new HashSet<DocumentoInsideMetadatosAdicionales>(
			0);
	private Set<DocumentoInsideFirmas> documentoInsideFirmases = new HashSet<DocumentoInsideFirmas>(
			0);

	public DocumentoInside() {
	}

	public DocumentoInside(String identificador, Date fechaVersion) {
		this.identificador = identificador;
		this.fechaVersion = fechaVersion;
	}

	public DocumentoInside(
			String identificador,
			String identificadorRepositorio,
			Date fechaVersion,
			String versionNti,
			Date fechaCaptura,
			Boolean origen,
			String nombreFormato,
			String tipoMime,
			String tipoDocumental,
			String estadoElaboracion,
			String identificadorDocumentoOrigen,
			String identificadorEnDocumento,
			String referencia,
			Date createdAt,
			Set<DocumentoInsideOrgano> documentoInsideOrganos,
			Set<DocumentoInsideMetadatosAdicionales> documentoInsideMetadatosAdicionaleses,
			Set<DocumentoInsideFirmas> documentoInsideFirmases) {
		this.identificador = identificador;
		this.identificadorRepositorio = identificadorRepositorio;
		this.fechaVersion = fechaVersion;
		this.versionNti = versionNti;
		this.fechaCaptura = fechaCaptura;
		this.origenCiudadanoAdministracion = origen;
		this.nombreFormato = nombreFormato;
		this.tipoMime = tipoMime;
		this.tipoDocumental = tipoDocumental;
		this.estadoElaboracion = estadoElaboracion;
		this.identificadorDocumentoOrigen = identificadorDocumentoOrigen;
		this.identificadorEnDocumento = identificadorEnDocumento;
		this.referencia = referencia;
		this.createdAt = createdAt;
		this.documentoInsideOrganos = documentoInsideOrganos;
		this.documentoInsideMetadatosAdicionaleses = documentoInsideMetadatosAdicionaleses;
		this.documentoInsideFirmases = documentoInsideFirmases;
	}

	/*@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)*/
	
	
	
	@Id
	@TableGenerator(name = "GeneradorPk_DocumentoInside",
            		table = "GeneradorClaves",
            		pkColumnName = "GenName",
            		valueColumnName = "GenValue",
            		pkColumnValue = "GEN_DocumentoInside",
            		allocationSize=1)
    @GeneratedValue(strategy = GenerationType.TABLE, generator = "GeneradorPk_DocumentoInside")
    @Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Version
	@Column(name = "version", nullable = true)
	public int getVersion() {
		return this.version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@Column(name = "identificador", nullable = false)
	public String getIdentificador() {
		return this.identificador;
	}

	public void setIdentificador(String identificador) {
		this.identificador = identificador;
	}

	@Column(name = "identificador_repositorio")
	public String getIdentificadorRepositorio() {
		return this.identificadorRepositorio;
	}

	public void setIdentificadorRepositorio(String identificadorRepositorio) {
		this.identificadorRepositorio = identificadorRepositorio;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechaVersion", nullable = false, length = 19)
	public Date getFechaVersion() {
		return this.fechaVersion;
	}

	public void setFechaVersion(Date fechaVersion) {
		this.fechaVersion = fechaVersion;
	}

	@Column(name = "versionNti")
	public String getVersionNti() {
		return this.versionNti;
	}

	public void setVersionNti(String versionNti) {
		this.versionNti = versionNti;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechaCaptura", length = 19)
	public Date getFechaCaptura() {
		return this.fechaCaptura;
	}

	public void setFechaCaptura(Date fechaCaptura) {
		this.fechaCaptura = fechaCaptura;
	}

	@Column(name = "origen")
	public Boolean getOrigenCiudadanoAdministracion() {
		return this.origenCiudadanoAdministracion;
	}

	public void setOrigenCiudadanoAdministracion(Boolean origen) {
		this.origenCiudadanoAdministracion = origen;
	}

	@Column(name = "nombreFormato")
	public String getNombreFormato() {
		return this.nombreFormato;
	}

	public void setNombreFormato(String nombreFormato) {
		this.nombreFormato = nombreFormato;
	}

	@Column(name = "tipoMime")
	public String getTipoMime() {
		return this.tipoMime;
	}

	public void setTipoMime(String tipoMime) {
		this.tipoMime = tipoMime;
	}

	@Column(name = "tipoDocumental")
	public String getTipoDocumental() {
		return this.tipoDocumental;
	}

	public void setTipoDocumental(String tipoDocumental) {
		this.tipoDocumental = tipoDocumental;
	}

	@Column(name = "estadoElaboracion")
	public String getEstadoElaboracion() {
		return this.estadoElaboracion;
	}

	public void setEstadoElaboracion(String estadoElaboracion) {
		this.estadoElaboracion = estadoElaboracion;
	}

	@Column(name = "identificadorDocumentoOrigen")
	public String getIdentificadorDocumentoOrigen() {
		return this.identificadorDocumentoOrigen;
	}

	public void setIdentificadorDocumentoOrigen(
			String identificadorDocumentoOrigen) {
		this.identificadorDocumentoOrigen = identificadorDocumentoOrigen;
	}

	@Column(name = "identificadorEnDocumento")
	public String getIdentificadorEnDocumento() {
		return this.identificadorEnDocumento;
	}

	public void setIdentificadorEnDocumento(String identificadorEnDocumento) {
		this.identificadorEnDocumento = identificadorEnDocumento;
	}

	@Column(name = "referencia")
	public String getReferencia() {
		return this.referencia;
	}

	public void setReferencia(String referencia) {
		this.referencia = referencia;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", length = 19)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechaBaja", length = 19)
	public Date getFechaBaja() {
		return fechaBaja;
	}

	public void setFechaBaja(Date fechaBaja) {
		this.fechaBaja = fechaBaja;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "documentoInside")
	public Set<DocumentoInsideOrgano> getDocumentoInsideOrganos() {
		return this.documentoInsideOrganos;
	}

	public void setDocumentoInsideOrganos(
			Set<DocumentoInsideOrgano> documentoInsideOrganos) {
		this.documentoInsideOrganos = documentoInsideOrganos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "documentoInside")
	public Set<DocumentoInsideMetadatosAdicionales> getDocumentoInsideMetadatosAdicionaleses() {
		return this.documentoInsideMetadatosAdicionaleses;
	}

	public void setDocumentoInsideMetadatosAdicionaleses(
			Set<DocumentoInsideMetadatosAdicionales> documentoInsideMetadatosAdicionaleses) {
		this.documentoInsideMetadatosAdicionaleses = documentoInsideMetadatosAdicionaleses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "documentoInside")
	public Set<DocumentoInsideFirmas> getDocumentoInsideFirmases() {
		return this.documentoInsideFirmases;
	}

	public void setDocumentoInsideFirmases(
			Set<DocumentoInsideFirmas> documentoInsideFirmases) {
		this.documentoInsideFirmases = documentoInsideFirmases;
	}


	@Override
	public String toString () {
		StringBuffer sb = new StringBuffer ("Entity DocumentoInside=[") ;
		String coma = ", ";
		sb.append("id=" + id + coma);
		sb.append("version=" + version + coma);
		sb.append("identificador=" + identificador + coma);
		sb.append("identificadorRepositorio=" + identificadorRepositorio + coma);
		sb.append("fechaVersion=" + InsideUtils.dateToStringISO8601(fechaVersion) + coma);
		sb.append("versionNti=" + versionNti + coma);
		sb.append("fechaCaptura=" + InsideUtils.dateToStringISO8601(fechaCaptura) + coma);
		sb.append("origen=" + origenCiudadanoAdministracion + coma);
		sb.append("nombreFormato=" + nombreFormato + coma);
		sb.append("tipoMime=" + tipoMime + coma);
		sb.append("tipoDocumental=" + tipoDocumental + coma);
		sb.append("estadoElaboracion=" + estadoElaboracion + coma);
		sb.append("identificadorDocumentoOrigen=" + identificadorDocumentoOrigen + coma);
		sb.append("identificadorEnDocumento=" + identificadorEnDocumento + coma);
		sb.append("referencia=" + referencia + coma);
		sb.append("createdAt=" + InsideUtils.dateToStringISO8601(createdAt) + coma);
		sb.append("fechaBaja=" + InsideUtils.dateToStringISO8601(fechaBaja) + coma);
		
		if (documentoInsideOrganos == null) {
			sb.append("documentoInsideOrganos=null" + coma);
		} else {
			sb.append("documentoInsideOrganos=<");
			for (DocumentoInsideOrgano documentoInsideOrgano : documentoInsideOrganos) {
				sb.append(documentoInsideOrgano.toString() + coma);
			}
			sb.append(">");
		}
		
		if (documentoInsideMetadatosAdicionaleses == null) {
			sb.append("documentoInsideMetadatosAdicionaleses=null" + coma);
		} else {
			sb.append("documentoInsideMetadatosAdicionaleses=<");
			for (DocumentoInsideMetadatosAdicionales documentoInsideMetadatosAdicionales : documentoInsideMetadatosAdicionaleses) {
				sb.append(documentoInsideMetadatosAdicionales.toString() + coma);
			}
			sb.append(">");
		}
		
		if (documentoInsideFirmases == null) {
			sb.append("documentoInsideFirmases=null" + coma);
		} else {
			sb.append("documentoInsideFirmases=<");
			for (DocumentoInsideFirmas documentoInsideFirma : documentoInsideFirmases) {
				sb.append(documentoInsideFirma.toString() + coma);
			}
			sb.append(">");
		}
		
		sb.append("]");
		return sb.toString();
	}
	

}
